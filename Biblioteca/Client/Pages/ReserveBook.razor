@page "/reserva"
@page "/reserva/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (ps == PageStates.SELECTALUNO)
{
    <h1 class="display-2"> Selecione o Aluno</h1>
}
else if (ps == PageStates.SELECTDATE)
{
    <h1 class="display-2"> Selecione a data da reserva.</h1>
}

@if (ps == PageStates.SELECTALUNO)
{

    <div class="alunoform">
        <EditForm Model="reserva">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="aluno">Pesquisar Aluno:</label>
                <input id="name" class="form-control" @bind="@searchTerm" @oninput="OnInput" autocomplete="off" />
                <ul class="autocomplete-list">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Nome</th>
                                <th scope="col">Série</th>
                                <th scope="col">Turma</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var aluno in filteredAlunos)
                            {
                                <tr>
                                    <th scope="row">@aluno.Name</th>
                                    <td>@aluno.Serie</td>
                                    <td>@aluno.Turma</td>
                                    <td><button @onclick="(() => SelectStudent(aluno))" class="btn btn-primary">Selecionar</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </ul>
            </div>
        </EditForm>
    </div>
}

else if (ps == PageStates.SELECTDATE)
{
    <p> Aluno: @nomeAluno</p>
    <p> Livro Selecionado: @livro.Title</p>

    <EditForm Model="reserva" OnSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="data">Data e Hora da Reserva:</label>
            <input id="data" class="form-control" @bind="reserva.DataReserva" type="datetime-local" />
        </div>

        <div class="form-group">
            <label for="description">Notas Adicionais: </label>
            <input id="description" class="form-control" @bind="reserva.Description" rows="3" type="text" />
        </div>
        <div class="buttons">
            <button type="submit" class="btn btn-success btn-lg">Confirmar</button>
            <Button Color="ButtonColor.Primary" @onclick="@Back" Size="Size.Large">Voltar</Button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    private string searchTerm = "";

    private string nomeAluno;

    private DateTime dataSelecionada = DateTime.Now;
    PageStates ps = PageStates.SELECTALUNO;

    private enum PageStates
    {
        SELECTALUNO,
        SELECTDATE
    }

    private List<Aluno> alunos = new List<Aluno>();
    private List<Aluno> filteredAlunos = new List<Aluno>();

    Livro livro = new Livro { };

    Reserva reserva = new Reserva { };

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<Aluno>>("api/aluno");
        if (result != null)
            alunos = result;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<Livro>($"api/livro/{Id}");
            if (result is not null)
            {
                livro = result;
                reserva.Situacao = "EMPRESTADO";
                reserva.LivroNome = livro.Title;
                reserva.DataReserva = dataSelecionada;
                reserva.IdLivro = livro.Code;
            }
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? ""; // Garante que searchTerm não seja null
        filteredAlunos = alunos
            ?.Where(a => a != null && // Verifica se aluno não é null
                         (a.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                         (a.Serie?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                         (a.Turma?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList() ?? new List<Aluno>(); // Se alunos ou filteredAlunos forem null, inicializa com uma lista vazia
    }

    private void Back()
    {
        if (ps == PageStates.SELECTDATE)
        {
            ps = PageStates.SELECTALUNO;
        }
    }

    private void SelectStudent(Aluno aluno)
    {
        var alunoTurma = $"{aluno.Serie} - {aluno.Turma}";

        nomeAluno = aluno.Name;
        reserva.AlunoNome = nomeAluno;
        reserva.Turma = alunoTurma;

        ps = PageStates.SELECTDATE;
    }


    async Task HandleSubmit()
    {
        await Http.PostAsJsonAsync("api/reserva", reserva);

        NavigationManager.NavigateTo("/services");
    }

}