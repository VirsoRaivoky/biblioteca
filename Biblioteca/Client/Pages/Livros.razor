@page "/livros"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h2 class="display-2"> Lista de Livros</h2>

<div class="info">
    <Alert Color="AlertColor.Primary">
        <h4 class="alert-heading"><Icon Name="IconName.InfoCircleFill" class="me-2"> </Icon> Sobre a página</h4>
        <p>
            A página contém informações sobre os Livros registrados no sistema, você pode ver informações adicionais
            clicando no <strong>nome do livro.</strong> Caso seja preciso alterar alguma informação, clique no botão <strong> "Editar" </strong>
        </p>
    </Alert>
</div>

<div class="createButton">
    <button @onclick="AddLivro" class="btn btn-primary btn-lg">
        <Icon Name="IconName.JournalPlus" /> Adicionar Livro
    </button>

</div>

<div class="livros">
    <div class="livrosDados">
        <Grid @ref="grid"
              TItem="Livro"
              Class="table table-hover table-bordered table-striped"
              DataProvider="LivrosDataProvider"
              AllowFiltering="true"
              AllowPaging="true"
              AllowSorting="true"
              PageSize="10" 
              PageSizeSelectorItems="@(new int[] { 5,10,20 })"
              PaginationItemsTextFormat="{0} - {1} itens de {2}"
              ItemsPerPageText="Itens por página"
              Responsive="true"
              FiltersRowCssClass="bg-success text-white bg-opacity-25 border-bottom-0"
              HeaderRowCssClass="bg-success text-white border-bottom-0">

            <GridColumn TItem="Livro" HeaderText="Titulo" SortKeySelector="@(item => item.Title)" PropertyName="Title" IsDefaultSortColumn="true" Sortable=true>
                @context.Title.ToUpper()
            </GridColumn>
            <GridColumn TItem="Livro" HeaderText="Autor" PropertyName="Author">
                @context.Author
            </GridColumn>
            <GridColumn TItem="Livro" HeaderText="Gênero" SortKeySelector="@(item => item.Genre)" PropertyName="Genre" Sortable=true>
                @context.Genre.ToUpper()
            </GridColumn>
            <GridColumn TItem="Livro" HeaderText="Editora" PropertyName="Publisher">
                @context.Publisher
            </GridColumn>
            <GridColumn TItem="Livro" HeaderText="Ações" Filterable=false>
                <Button Color="ButtonColor.Success" TooltipTitle="Ver Mais" TooltipColor="TooltipColor.Info" @onclick="() => OnShowModalClick(context.Id)"> <Icon Name="IconName.InfoCircle"></Icon></Button>
                <Button Color="ButtonColor.Success" TooltipTitle="Realizar Reserva" TooltipColor="TooltipColor.Success" @onclick="(() => ReserveBook(context.Id))"><Icon Name="IconName.Journal"></Icon></Button>
            </GridColumn>
        </Grid>
    </div>
</div>

<Modal @ref="modal" Title="Informações do Livro">
    <BodyTemplate>
        @if (livroModal != null)
        {

            <p><strong>Título:</strong> @livroModal.Title</p>
            <p><strong>Autor:</strong> @livroModal.Author</p>
            <p><strong>Gênero:</strong> @livroModal.Genre</p>
            <p><strong>Ano:</strong> @livroModal.Year</p>
            <p><strong>Editora:</strong> @livroModal.Publisher</p>
            <p><strong>ISBN:</strong> @livroModal.ISBN</p>
            <p><strong>Código:</strong> @livroModal.Code</p>
            <p><strong>Exemplares:</strong> @livroModal.Estoque</p>
        }
        else
        {
            <p> Livro não encontrado</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Danger" @onclick="OnHideModalClick">Fechar</Button>
        <Button Color="ButtonColor.Warning" @onclick="(() => EditLivro(livroModal.Id))">Editar Informações</Button>
    </FooterTemplate>
</Modal>


@code {
    private BlazorBootstrap.Grid<Livro>? grid = new BlazorBootstrap.Grid<Livro>();

    private Modal modal = default!;

    [Inject] ModalService modalService { get; set; } = default!;

    private IEnumerable<Livro>? livros;
    private Livro? livroModal;

    private async Task<GridDataProviderResult<Livro>> LivrosDataProvider(GridDataProviderRequest<Livro> request)
    {

        if (livros is null)
        {
            var result = await Http.GetFromJsonAsync<List<Livro>>("api/livro");
            if (result != null)
                livros = result;
        }

        if (livros != null)
        {
            return await Task.FromResult(request.ApplyTo(livros));
        }
        else
        {
            return await Task.FromResult(new GridDataProviderResult<Livro>());
        }


    }

    private async Task OnShowModalClick(int id)
    {
        livroModal = livros.FirstOrDefault(l => l.Id == id);
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    void AddLivro()
    {
        NavigationManager.NavigateTo("/livro");
    }

    void EditLivro(int id)
    {
        NavigationManager.NavigateTo($"/livro/{id}");
    }

    void ReserveBook(int id)
    {
        NavigationManager.NavigateTo($"/reserva/{id}");
    }


}
